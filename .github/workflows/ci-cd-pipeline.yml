name: CI/CD Pipeline for Mock Repo

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pylint ruff

    - name: Run pylint
      run: pylint app/**/*.py

    - name: Run ruff
      run: ruff check app/**/*.py

  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        uv sync --all-extras

  test:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        uv sync --all-extras

    - name: Run tests
      run: uv run python -m pytest tests

  # Commented out SonarQube step
  # code_quality:
  #   runs-on: ubuntu-latest
  #   needs: test

  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v2

  #   - name: SonarQube Scan
  #     uses: sonarsource/sonarqube-scan-action@v1.0.0
  #     env:
  #       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #       SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  security_scan:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run Bandit
      run: bandit -r app

    - name: Run Safety
      run: safety check

  dependency_management:
    runs-on: ubuntu-latest
    needs: security_scan

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.12'

    - name: Install pip-tools
      run: pip install pip-tools

    - name: Compile requirements
      run: pip-compile

  containerize:
    runs-on: ubuntu-latest
    needs: dependency_management

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Build Docker image
      run: docker compose up -d

  # Commented out OpenShift deployment step
  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: containerize

  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v2

  #   - name: Deploy to OpenShift
  #     run: |
  #       oc login ${{ secrets.OPENSHIFT_SERVER }} --token=${{ secrets.OPENSHIFT_TOKEN }}
  #       oc project myproject
  #       oc start-build aurora-nlp --from-dir=. --follow

  # Commented out Teams notification step
  # notify:
  #   runs-on: ubuntu-latest
  #   needs: [lint, build, test, security_scan, dependency_management, containerize]

  #   steps:
  #   - name: Send Teams notification
  #     run: |
  #       curl -H 'Content-Type: application/json' -d '{"text": "Pipeline completed successfully"}' ${{ secrets.TEAMS_WEBHOOK_URL }}